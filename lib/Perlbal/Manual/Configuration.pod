=head1 NAME

Perlbal::Manual::Configuration - How to configure Perlbal


=head2 VERSION

This document refers to Perlbal 1.76.


=head2 Using a configuration file

By default, perlbal looks for a configuration file at C</etc/perlbal/perlbal.conf>.

You can also point perlbal at a different configuration file with the -c flag.

    $ perlbal -c /home/user/perlbal.conf


=head2 Configuration file

A C<Perlbal>'s configuration file is a text file where you create pools and services, add servers to pools, set services' parameters and enable/disable services.

Indentation is not mandatory, but it's considered a good practice for readability issues.

Configuration is case insensitive, but it's also a good practice to uppercase all directives.


=head3 Pools

Here's a sample configuration of a pool:

    CREATE POOL mywebsite
        POOL mywebsite ADD 10.0.0.1:80
        POOL mywebsite ADD 10.0.0.2:80

The first line creates a pool called C<mywebsite>. The second and third lines add two different servers to that pool.

From here on you'll be able to use this pool in a service.

Also, note that right after creating the pool, you don't need to specify which pool you're adding servers to, as it is considered to be the active pool:

    CREATE POOL mywebsite
        POOL ADD 10.0.0.1:80
        POOL ADD 10.0.0.2:80


=head4 Configuring a pool in a separate file

You can create a pool in a separate file by using the C<nodefile> parameter:

    CREATE POOL dynamic
        SET nodefile = conf/nodelist.dat

This separate file should contain IP addresses, one per line (empty lines are ignored, as well as comments started by the L<#> sign).

Check C<conf/load-balancer.conf> and C<conf/nodelist.dat> for an example.


=head3 Services

Here's a sample service:

    CREATE SERVICE service_mywebsite
        SET role            = reverse_proxy
        SET pool            = mywebsite
        SET listen          = 10.0.0.3:80

The first line creates a service called C<service_mywebsite>.

On the three following lines we are setting up three parameters for that service (you can see this same example in C<Perlbal::Manual::LoadBalancer> in more detail).


=head3 Setting parameters

You can set parameters via commands of either forms:

    SET <service-name> <param> = <value>
    SET <param> = <value>

For a full list of parameters see C<Perlbal::Manual::LoadBalancer>, C<Perlbal::Manual::ReverseProxy> or C<Perlbal::Manual::WebServer>.


=head4 B<Note on types>:

'bool' values can be set using one of 1, true, yes, on, 0, false, off, or no.

'size' values are in integer bytes, or an integer followed by 'b', 'k', or 'm' (case-insensitive) for bytes, KiB, or MiB.


=head3 Enabling/Disabling services

To enable a service:

    ENABLE service_mywebsite

To disable a service:

    DISABLE service_mywebsite

The lines is what allows you to have several services configured in a file even if they are not currently active (a common scenario is to configure everything on the file and then enable/disable services on-the-fly as required; see C<Perlbal::Manual::Management> for more information on this process).


=head3 Comments

Comments in C<Perlbal>'s configuration files start with a C<#>:

    # this is a comment
    ENABLE myservice # this is also a comment


=head2 Setting up Perlbal

You can run C<perlbal> as a daemon:

    $ perlbal --daemon -c /home/user/perlbal.conf

A common practice is to create a C<perlbal.sh> file that supports the common operations you'll require (start, stop, restart) and place it under C</etc/init.d>.


=head2 SEE ALSO

C<Perlbal::Manual::Management>.
