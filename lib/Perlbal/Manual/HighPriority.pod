=head1 NAME

Perlbal::Manual::HighPriority - Using Perlbal as a Load Balancer


=head2 VERSION

This document details the high priority queueing system in Perlbal 1.76.


=head3 High priority queuing system

Perlbal has a high priority queue for sending requests through to backends quickly, using cookies to determine if a request should go to fast queue (configurable).

The parameters to configure this are C<high_priority_cookie> and C<high_priority_cookie_contents>; the first defines the name of the field to check for on the cookie and the second one defines the content in that field that will trigger the request going to the fast queue:

    SET myservice.high_priority_cookie = name_of_the_field
    SET myservice.high_priority_cookie_contents = required_content_on_that_field

Here's a clearer example:

    SET myservice.high_priority_cookie = highpriority
    SET myservice.high_priority_cookie_contents = yes

Internally, Perlbal pushes requests into arrays. The concept is that two arrays exist: one for regular requests, and another for high priority requests. Whenever Perlbal can process another request, it first tries to retrieve a request from the high priority array; if that array is empty, it proceeds to the regular requests array.

Sometimes if the high priority queue is really busy, the standard queue will suffer from resource starvation. The queue relief system helps prevent this. When there are C<queue_relief_size> or more connections in the standard queue, newly available backends have a C<queue_relief_chance> percent chance of taking a request from the standard priority queue instead of the high priority queue.

    SET web_proxy.queue_relief_size = 2000
    SET web_proxy.queue_relief_chance = 30 # 0-100, in percent

The plugin C<Perlbal::Plugin::Highpri> supports making requests high priority by URI or Host. Also check C<make_high_priority> under C<Perlbal::Manual::Hooks>.
