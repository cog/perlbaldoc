=head1 Perlbal Hooks

Perlbal hooks.


=head2 VERSION

This document details Perlbal 1.76's system for hooks.


=head2 DESCRIPTION

Basically, a hook is a bit of code that is run at certain stages in the requests that Perlbal handles.There are all kinds of hooks available and they all do different things. Some are only applicable to some of the roles and others are applicable only to certain classes. Each hook is described in detail below, but first a description of the basics of a hook.

In general, you define a hook by calling the C<register_hook> method on a C<Perlbal::Service> object. You specify what hook you are interested in and provide a reference to a subroutine that will be called with the parameters particular to that hook.


=head2 Types of hooks

There are three types of hooks:

=head3 Global hooks

These are hooks that are defined on a global scale. They are set like so:

    Perlbal::register_global_hook('foo', sub { return 0; });

That would define a global hook named foo that would return 0 when it's called. (Return codes from hooks will be explained below)


=head3 Service handler hooks

A handler hook is attached to a particular service. These hooks are called one at a time, starting from the top of the hook list on a service, until one hook returns 1.  At that point, no further hooks are called. For example:

    $service->register_hook('bar', sub {
        # do something
        return 1;
    });

When this hook runs, it would return 1, signalling to Perlbal that it had done what it needed to do and that Perlbal shouldn't call any further hooks. You can use this type of hook to create sets of plugins that all handle different types of requests, and when one hook had handled a request it wouldn't continue telling other hooks about the request.


=head3 Service general hooks

These hooks are defined the same way as above, but general hooks are all run. The return code is ignored. This can be useful for putting in code that records statistics about an action or something to that effect.


=head2 Existing hooks

The following hooks are defined in the Perlbal distribution:

=over 4

=item GENERAL     end_proxy_request

This hook is called when the ClientProxy object is being closed.

Available in role C<reverse_proxy>.


=item HANDLER     start_http_request

A generic hook that works for both webserver and proxy modes, run after either the specific C<start_proxy_request> or C<start_web_request> hooks below. Like those, you return true from this hook to takeover the connection.

Called in C<Perlbal::ClientProxy> and C<Perlbal::ClientHTTP>.

Available in roles C<reverse_proxy> and C<web_server>.


=item HANDLER     start_proxy_request

Called as soon as we've read in headers from a user but right before we've requested a backend connection. If a true value is returned, Perlbal will not request a backend.

Called in C<Perlbal::ClientProxy>.

Available in role C<reverse_proxy>.


=item HANDLER     start_file_reproxy

Called when we've been told to reproxy a file. If you return a true value, Perlbal will not perform any operations on the file and will simply return. You can also change the file in the scalar ref passed as the second parameter.

Called in C<Perlbal::ClientProxy>; receives C<$filename_ref>, a reference to the filename.

Available in role C<reverse_proxy>.


=item HANDLER     backend_client_assigned

Happens right after a backend is assigned to a client, but before we've talked to the backend and asked it to do something. If you return a true value, the process is stopped and you will manually have to send the client's request to the backend, etc.

Called in C<Perlbal::BackendHTTP>.

Available in role C<reverse_proxy>.


=item HANDLER     start_web_request

When a 'web' service has gotten headers and is about to serve it... return a true value to cancel the default handling of web requests.

Called in C<Perlbal::ClientHTTP>.

Available in role C<web_server>.


=item HANDLER     start_send_file

Called when we've opened a file and are about to start sending it to the user using sendfile. Return a true value to cancel the default sending.

Called in C<Perlbal::ClientHTTPBase>.

Available in role C<web_server>.


=item HANDLER     start_serve_request

Called when we're about to serve a local file, before we've done any work. You can change the file served by modifying C<$uri_ref>, or cancel the process by returning a true value.

Called in C<Perlbal::ClientHTTPBase>; receives C<$uri_ref>, a reference to the URI.

Available in role C<web_server>.


=item HANDLER     modify_response_headers

Called when we've set all the headers, and are about to serve a file. You can change or add response headers at this point, or cancel the process by returning a true value. You will have to send the response to the client yourself if you do this.

Called in C<Perlbal::ClientHTTPBase>.

Available in role C<web_server>.


=item HANDLER     reproxy_fh_finished

Called when a reproxy file has completed and is about to close the file handle. You can cancel the process by returning a true value (in which case you will have to close the reproxy_fh yourself).

Called in C<Perlbal::ClientHTTPBase>.

Available in role C<web_server>.


=item HANDLER     backend_response_received

Called as soon as response headers are read from the backend. If you return a true value, will stop all handling at that point.

Called in C<Perlbal::BackendHTTP>.

Available in all roles.


=item HANDLER     make_high_priority

Called when a request is received and right before we're about to determine if this request is high priority or not. Return a true value to make the request high priority; false to leave it alone. Note that this is only called when the request isn't already high priority due to cookie priority scheduling, which is done inside Perlbal's Service module.

Called in C<Perlbal::ClientProxy>.

Available in all roles.


=item HANDLER     return_to_base

Called when a request has been finished, and control of the Client* object is about to be transferred back to ownership by a service selector. Return a true value if the perlbal core action in this situation should be bypassed.

Called in C<Perlbal::ClientHTTPBase>.

Available in all roles.


=back


=head2 SEE ALSO

C<Perlbal::Manual::Plugins>.
