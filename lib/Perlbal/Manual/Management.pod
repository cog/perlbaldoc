=head1 Managing Perlbal on-the-fly

Managing Perlbal.

For documentation on how to configure Perlbal read C<Perlbal::Manual::Configuration>.

=head2 VERSION

This document details management of Perlbal 1.76.


=head2 Setting up a management service

You can create a management service in the following way:

    CREATE SERVICE mgmt
        SET role   = management
        SET listen = 127.0.0.1:16000
    ENABLE mgmt


=head3 Consulting information with a browser

If you access the management service (in this case, 127.0.0.1 on port 16000) with a browser you'll reach a page with information on the services that are enabled. You're also able to click those services and reach further information on each one of them.

=head3 Managing Perlbal via telnet

If you telnet to the management service you get a connection that allows you manage your C<Perlbal>'s instance.

    $ telnet 127.0.0.1 16000
    Trying 127.0.0.1...
    Connected to 127.0.0.1.
    Escape character is '^]'.
    
You now have access to several commands (which are case insensitive):

=head4 Admin Commands

=over 4


=item create pool <name>

=item create service <name>

Creates a pool or a service.

    create pool my_new_pool

    create service my_new_service


=item disable <service>

Disables a service (stops listening).

    disable my_service

Note that you can not disable C<management> services.


=item enable <service>

Enables a service (starts listening).

    enable my_service


=item header

...


=item load <plugin>

Loads a Perlbal plugin.

    load AccessControl


=item plugins

Lists plugins


=item pool <name> add <ip[:port]>

=item pool <name> remove <ip[:port]>

Allows you to add or remove nodes from a service.

    pool add my_service 127.0.0.1:1337

    pool remove my_service 127.0.0.1:1337

Note that adding a node that already exists or removing a non-existing node do not result in an error message.

Also note that the port number defaults to :80 if omitted.


=item reproxy_state

Dumps the state of reproxy status.

...


=item server

...


=item set [<pool_name>] <param> = <value>

Sets a property on a pool. If the pool was just created, specifying the pool name is optional.

Setting the file to autoload nodes from (Perlbal will periodically check the file for updates):

    SET my_pool nodefile = /path/to/file

Unsetting the file to autoload nodes from (note that this does not remove current members):

    SET my_pool nodefile = none

C<undef>, C<null>, "" and '' are interpreted just like C<none>.

Setting the load balancing method:

    SET pool balance_method = 'random'

Yes, we do realize that C<random> is the only method currently available, but hey.


=item set [<service_name>] <param> = <value>

Sets a property on a service. If the service was just created, specifying the service name is optional.

See C<Perlbal::Manual::LoadBalancer>, C<Perlbal::Manual::ReverseProxy> and C<Perlbal::Manual::WebServer> for the list of available parameters.


=item show service [<service_name>]

=item show pool [<pool_name>]

List all services:

    show service

Show details of a service:

    show service my_service

Lists all pools, nodes and services using them:

    show pool

Show the members of a pool:

    show pool my_pool


=item shutdown [graceful]

Shuts down the server (you'll also lose your telnet session).

Can be used instantly, killing all active connections:

    shutdown

Using the parameter C<graceful> listening sockets are closed and perlbal stays alive until clients bleed off.

    shutdown graceful


=item unload <plugin>

Unloads a plugin.

    unload AccessControl


=item use <service>

=item use <pool>

Sets the implied service or pool for future operations.

For instance, after:

    use my_pool

You can just type:

    pool add 127.0.0.1:6000

Note that creating a service or pool also sets it as the implied service.


=item xs

=item xs [enable <module>]

=item xs [disable <module>]

Show status of XS modules loaded:

    xs

Turn on an already-loaded XS module:

    xs enable module_name

Turn off an already-loaded XS module:

    xs disable module_name


=back


=head4 Diagnostic Commands


=over 4

=item aio

...


=item backends

...


=item dumpconfig

Shows the current configuration.


=item fd

Shows the maximum number of file descriptors and how many are currently in use.


=item gladiator

Requires C<Devel::Gladiator>.

Iterate's Perl's internal memory structures and can be used to enumerate all the currently live SVs.

This can be used to hunt leaks and to profile memory usage.


=item help

Displays the list of available commands.


=item leaks

...


=item mime

...


=item node

...


=item nodes

...


=item noverify

...


=item obj

Shows objects count in scope.


=item pending

...


=item proc

Shows CPU usage, current time, pid, and total requests processed.


=item prof on

=item prof off

=item prof data

Enables/disables profiling or dumps profile data.


=item queues

Shows status of all queues (normal, high priority and low priority) for all enabled services.

    queues
    service_mywebsite-normal.age 1
    service_mywebsite-normal.count 8
    service_mywebsite-highpri.age 0
    service_mywebsite-highpri.count 0
    service_mywebsite-lowpri.age 0
    service_mywebsite-lowpri.count 0


=item reload

...


=item socks [all]

=item socks summary

Lists all sockets or shows a summary of the sockets (by default lists all sockets).

    socks
       fd    age
        3   748s Perlbal::ClientManage(R): open to 85.245.86.253:52248
        4  1003s Perlbal::TCPListener(R): open: listening on 82.102.30.112:80 for service 'ws'
        6  1003s Perlbal::TCPListener(R): open: listening on 0.0.0.0:60000 for service 'mgmt'

    socks summary
        1 Perlbal::ClientManage
        2 Perlbal::TCPListener
    Aggregate write buffer: 0.0k
                Open files: 0


=item state

...


=item states

...


=item track

...


=item uptime

=item version

Shows the time the server was started, the current uptime and Perlbal's version.


=item varsize

...


=item verbose on

=item verbose off

...



=back


=head2 CAVEAT

Note that this functionality doesn't implement any sort of authentication. If you can telnet to the address you specify, you can access the information and change things on the fly.

Some alternatives to authentication are commonly employed:

=over 4

=item * specifying the address as being 127.0.0.1 means that no one outside the machine can telnet to the management service;

=item * setting the management address as a private IP available only through a VPN, for instance, will allow you to manage these accesses on the VPN instead.

=back

