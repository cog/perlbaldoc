=head1 NAME

Perlbal::FAQ - Frequently Asked Questions about Perlbal


=head2 VERSION

Perlbal 1.76.


=head2 DESCRIPTION

This document aims at listing several Frequently Asked Questions regarding Perlbal.


=head2 Configuring Perlbal

=head3 Is there a sample C<perlbal.*> I can use for my C<init.d>?

Yes, you can find one under C<debian/perlbal.init>. It implements C<start>, C<stop> and C<restart/force-reload>. Make sure you adjust it to your particular taste and/or needs.


=head3 Is there a way to make perlbal re-read the config file without shuting it down?

No, there is not. But typically, if you're making changes, you can just make them on the management console, which doesn't require any restart whatsoever.

Still, restarting is probably easy. The trick to it is to simulate a graceful restart.


=head3 How can I implement a graceful restart?

Here's a sample script that will allow you to perform a graceful restart:

    $ cat restart-perlbal.sh
    echo "shutdown graceful" | nc localhost 60000
    /usr/local/bin/perlbal --conf=/etc/perlbal.conf

The idea is that you tell the old Perlbal to do a graceful shutdown; that immediately closes all of the listening sockets, so new connections are not accepted. As soon as that's done (which is instant) you can start up a new Perlbal.

This gives you a minimum of downtime that can be measured on the order of milliseconds (the time it takes for the new Perlbal to start up).

Remember that you need to have a C<management> service listening on port 60000 for this example to work. See L<Perlbal::Manual::Management>.


=head2 Load Balancing

=head3 What balancing algorithm does Perlbal use?

Currently, Perlbal supports only one balancing method: C<random>.

    SET pool balance_method = 'random'

With this mode, Perlbal selects one of the nodes within the pool randomly for each request received.


=head2 Plugins

=head3 Can I influence the order plugins are used?

Yes. When you set the plugins for your service they get to register their hooks in order.

    SET plugins = AccessControl HighPri

These hooks are pushed into an array, which means that they preserve the order of the plugins.


=head2 HTTP, SSL

=head3 Does perlbal support HTTP 1.1?

Perlbal for the most part only speaks HTTP/1.0 both to clients and to backend webservers. It happily takes requests advertising HTTP/1.1 and downgrading them to HTTP/1.0 when speaking to backend serves.

It knows all about persistent connections (in both 1.0 and 1.1) and will reply with HTTP/1.0 Connection: keep-alive the request was only implicitly keep-alive with HTTP/1.1.  etc.

Perlbal is now also starting to speak more of 1.1. For instance, Perlbal does support receiving transfer-encoding "chunked" requests from clients (a feature of HTTP/1.1), will send a C<100 Continue> in response to C<Expect: 100-continue>, and will parse the chunked requests, writing the request-of-unknown-length to disk (only if C<buffered_uploads> is enabled), and then will send an HTTP/1.0 request to the backends, with the actual C<Content-Length> (now known) filled in.

When more of 1.1 is supported, it will become an option, and later become the default. However, after several years of usage, there just hasn't been that much of a reason. The chunked requests (common from mobile phones uploading large images) has been the most annoying shortcoming but now that it's solved, it's questionable whether or not more of HTTP/1.1 will be supported.


=head3 Does perlbal support SSL?

Yes. To use SSL mode you'll need L<IO::Socket::SSL> C<v0.97+> installed.

You can do SSL either on C<web_server>, C<reverse_proxy> or C<selector> modes, but not on a vhost-based C<selector> service, because SSL and vhosts aren't compatible.

See the configuration file F<ssl.conf> under F<conf/> for an example.


=head2 SEE ALSO

L<Perlbal::Manual>.
